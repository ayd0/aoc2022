const fs = require('fs');

const data = fs.readFileSync(process.argv[2], 'utf-8').split('\n');

if (process.argv[3] == 1) {
    let numFiles = 0;
    let numDirs = 0;
    let cmdErr = false;

    data.forEach(el => {
        if (+el[0] > 0) {
            // only strings which typecast to real numbers can be > 0 || < 0
            numFiles++;
        } else if (el[0] === 'd') {
            numDirs++;
        }
    })

    console.log("Number of files: ", numFiles);
    console.log("Number of dirs: ", numDirs);
} else {
    /*
        * dir structure by idx:
        * 0 - dirName
        * 1 - cumulative file size
        * 2 - subDirs
        *   *- if subDirs is empty, path should be 0!
        */

        const dir = ['/', 0, []];
    let path = [0];
    let cmdErr = false;

    const getCurDir = (ovPath, total) => {
        // override path
        if (ovPath === undefined) ovPath = path;
        let pseudo = dir;

        ovPath.forEach((seq, idx) => {
            if (seq > 0) {
                // arg for incrementFileSizes(), adds total up stack to fs
                if (total !== undefined && idx !== path.length) pseudo[1] += total;

                // should only be selecting index 0 when home is empty
                pseudo = pseudo[2][seq - 1];

            } else {
                return pseudo;
            }
        }) 

        return pseudo;
    }

    const getLastDirName = () => {
        if (getCurDir()[0] !== '/') {
            let ovPath = path.slice();
            ovPath.pop();
            if (!Array.isArray(ovPath)) ovPath = [ovPath];

            return getCurDir(ovPath)[0];
        } else {
            return '/';
        }
    }

    const mkdir = (name) => {
        getCurDir()[2].push([getLastDirName() + '/' + name, 0, []]);
    }

    const incrementFileSizes = () => {
        // in FIRST pass, only write to getCurDir[1] if it's EQUAL to 0 
        // similarly, only write up stack when getCurDir[1] is EQUAL to 0

        let total = 0;
        if (getCurDir()[1] === 0) { 
            if (getCurDir().length > 3) { 
                getCurDir().slice(3).forEach(num => total += num);
                getCurDir()[1] = total;
            }
            // TODO: increment total up stack
            getCurDir(undefined, total)
        }
    }

    /* MAIN PASS */
        data.some((cmd, cmdIdx) => {
            try {
                if (path.includes(NaN)) throw(new Error('Path contains element which is NaN!'));

                if (cmd[0] === '$') {
                    if (cmd[2] === 'c') {
                        // handle file sizes on directory change
                        incrementFileSizes();

                        // process cd command
                        if (cmd[5] === '/') {
                            // rooot
                            path = [0];
                        } else if (cmd[5] === '.') {
                            // up
                            path.pop();                    
                            path[path.length - 1] = 0;
                            if (!Array.isArray(path)) path = [path];
                        } else {
                            // down: name
                            const dirName = cmd.slice(5);
                            let idx;
                            // [].indexOf not working in this case, hacky implementation
                            getCurDir()[2].some((el, i) => {
                                if (el[0].slice(el[0].length - dirName.length) === dirName) {
                                    idx = i;
                                    return true;
                                }
                                return false;
                            });
                            path[path.length - 1] += idx + 1;
                            path.push(0);
                        }
                    }
                } else if (cmd[0] === 'd') {
                    // check if dir(name) exists and if not, create dir
                    const dirName = cmd.slice(4);

                    const idx = getCurDir()[2].indexOf(el => el[0] === dirName);
                    if (idx === -1) {
                        // create dir
                        mkdir(dirName);
                    }
                } else if (+cmd[0] >= 0) {
                    // cmd[0] is real num
                    getCurDir().push(Number(cmd.match(/\d+/)));
                }
            } catch (err) {
                console.error(err);
                console.log(`ERROR: CMD (${cmdIdx})  >`, typeof cmd, cmd);
                cmdErr = true;
                return true;
            }
            return false;
        })

    const dSizes = [];

    if (!cmdErr) {
        // last pass w/o cd
        incrementFileSizes();

        // for each directory, grab val, enter d[2], repeat
        const rDirGetFS = (d) => {
            // PART A:
            // if (d[1] <= 100000) dSizes.push(d[1]);
            //
            // PART B:
            dSizes.push(d[1]);
            if (d[2].length > 0) {
                d[2].forEach(nd => {
                    rDirGetFS(nd);
                })
            }
        }

        rDirGetFS(dir);
        dSizes.sort((a, b) => {
            if (a > b) return 1;
            if (a < b) return -1;
            else return 0;
        });
    }

    // PART A: 
    // console.log(dSizes.reduce((part, a) => part + a, 0));

    // part B:
    const totalDiskSpace = 70000000;
    const updateSpaceReq = 30000000;

    console.log(dSizes.length);
    console.log("Total added FS: ", dSizes.reduce((acc, cur) => acc + cur, 0));
    console.log("Final FS: ", dSizes.reduce((acc, cur) => acc + cur, 0));

}
